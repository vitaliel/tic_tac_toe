import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {loginApi, tokenApi} from "./userApi";
import {STORAGE_TOKEN} from "../../constants";

const initialState = {
  id: 0,
  login: '',
  error: '',
  status: 'idle',
};

export const loginAsync = createAsyncThunk(
  'user/login',
  async ({login, password}) => {
    const res = await loginApi(login, password);
    // The value we return becomes the `fulfilled` action payload
    return res.data;
  }
);

export const checkTokenAsync = createAsyncThunk(
  'user/checkToken',
  async () => {
    const token = localStorage.getItem(STORAGE_TOKEN);

    if (token) {
      const response = await tokenApi(token);
      return response.data;
    } else {
      return {status: 'error', message: 'missing token'}
    }
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // console.log('login after', action.payload, state);
        const {status} = action.payload;

        if (status === 'success') {
          const {data} = action.payload;
          localStorage.setItem(STORAGE_TOKEN, data.token);
          state.id = data.user.id;
          state.login = data.user.login;
          state.error = '';
        } else {
          const {message} = action.payload;
          state.error = message;
        }
      })
      .addCase(loginAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.error = 'Error: unknown error'
      })
      .addCase(checkTokenAsync.pending, (state) => {
      })
      .addCase(checkTokenAsync.fulfilled, (state, action) => {
        const {status} = action.payload;

        if (status === 'success') {
          const {data} = action.payload;
          state.id = data.user.id;
          state.login = data.user.login;
        } else {
          localStorage.removeItem(STORAGE_TOKEN)
        }
      })
      .addCase(checkTokenAsync.rejected, (state, action) => {
        state.error = 'Error: unknown error'
      });
  },
})

export const isLoggedIn = (state) => state.user.id > 0;
export const userLogin = (state) => state.user.login;
export const loginError = (state) => state.user.error;

export default userSlice.reducer;
